import { RecipeCard } from "@/app/components/RecipeCard/RecipeCard";
import { getRecipes } from "@/app/lib/api";
import "../app/globals.css";
import { RecipeListDto } from "@/app/types/recipe";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import { SearchFilter } from "@/app/components/SearchFilter/SearchFilter";
import styles from "./main.module.css";
import { ParsedUrlQuery } from "querystring";

function formatRecipesCount(count: number): string {
  if (count % 100 >= 11 && count % 100 <= 19) {
    return "—Ä–µ—Ü–µ–ø—Ç—ñ–≤";
  }
  const lastDigit = count % 10;
  if (lastDigit === 1) {
    return "—Ä–µ—Ü–µ–ø—Ç";
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return "—Ä–µ—Ü–µ–ø—Ç–∏";
  }
  return "—Ä–µ—Ü–µ–ø—Ç—ñ–≤";
}

function getPageTitle(query: ParsedUrlQuery): string {
  if (query.category) return `–†–µ—Ü–µ–ø—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${query.category}`;
  if (query.country) return `–†–µ—Ü–µ–ø—Ç–∏ –∑ –∫—Ä–∞—ó–Ω–∏: ${query.country}`;
  if (query.ingredient) return `–†–µ—Ü–µ–ø—Ç–∏ –∑ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–æ–º: ${query.ingredient}`;
  if (query.search) return `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è: "${query.search}"`;
  return "–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏";
}

function getPageSubtitle(query: ParsedUrlQuery, recipesCount: number): string {
  if (recipesCount === 0) return "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É";

  const countText = `${recipesCount} ${formatRecipesCount(recipesCount)}`;

  if (query.category) return `–ó–Ω–∞–π–¥–µ–Ω–æ ${countText} —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó`;
  if (query.country) return `–ó–Ω–∞–π–¥–µ–Ω–æ ${countText} –∑ —Ü—ñ—î—ó –∫—Ä–∞—ó–Ω–∏`;
  if (query.ingredient) return `–ó–Ω–∞–π–¥–µ–Ω–æ ${countText} –∑ —Ü–∏–º —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–æ–º`;
  if (query.search) return `–ó–Ω–∞–π–¥–µ–Ω–æ ${countText} –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º`;
  return `–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ ${countText} –∑ –Ω–∞—à–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó`;
}

export const getServerSideProps: GetServerSideProps<{
  recipeData: RecipeListDto | null;
  title: string;
  query: ParsedUrlQuery;
}> = async (context) => {
  const { query } = context;
  const recipeData = await getRecipes({
    ingredient: query.ingredient as string,
    country: query.country as string,
    category: query.category as string,
    search: query.search as string,
  });
  const title = getPageTitle(query);

  return {
    props: {
      recipeData,
      title,
      query,
    },
  };
};

export default function HomePage({
  recipeData,
  title,
  query,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const recipesCount = recipeData?.recipes.length || 0;
  const subtitle = getPageSubtitle(query, recipesCount);
  const hasResults = recipeData && recipeData.recipes.length > 0;
  const hasFilters = Object.keys(query).length > 0;

  return (
    <div className={styles.container}>
      <main className={styles.main}>
        <header className={styles.header}>
          <div className={styles.headerContent}>
            <h1 className={styles.title}>{title}</h1>
            <p className={styles.subtitle}>{subtitle}</p>

            {hasFilters && (
              <div className={styles.activeFilters}>
                <span className={styles.filtersLabel}>–ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:</span>
                <div className={styles.filterTags}>
                  {query.category && (
                    <span className={styles.filterTag}>
                      –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {query.category}
                    </span>
                  )}
                  {query.country && (
                    <span className={styles.filterTag}>
                      –ö—Ä–∞—ó–Ω–∞: {query.country}
                    </span>
                  )}
                  {query.ingredient && (
                    <span className={styles.filterTag}>
                      –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç: {query.ingredient}
                    </span>
                  )}
                  {query.search && (
                    <span className={styles.filterTag}>
                      –ü–æ—à—É–∫: `{query.search}`
                    </span>
                  )}
                </div>
              </div>
            )}
          </div>
        </header>

        <section className={styles.searchSection}>
          <SearchFilter />
        </section>

        <section className={styles.resultsSection}>
          {!hasResults ? (
            <div className={styles.noResults}>
              <div className={styles.noResultsIcon}>üîç</div>
              <h3 className={styles.noResultsTitle}>–†–µ—Ü–µ–ø—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
              <p className={styles.noResultsText}>
                {hasFilters
                  ? "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –∞–±–æ —Å–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç—ñ–≤."
                  : "–í–∏–±–∞—á—Ç–µ, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –º–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."}
              </p>
              {hasFilters && (
                <div className={styles.suggestions}>
                  <p className={styles.suggestionsTitle}>
                    –°–ø—Ä–æ–±—É–π—Ç–µ —Ü—ñ –ø–æ—Ä–∞–¥–∏:
                  </p>
                  <ul className={styles.suggestionsList}>
                    <li>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å</li>
                    <li>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏</li>
                    <li>–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–±–æ –∫—Ä–∞—ó–Ω–∏</li>
                    <li>–°–∫–∏–Ω—å—Ç–µ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏</li>
                  </ul>
                </div>
              )}
            </div>
          ) : (
            <>
              <div className={styles.resultsHeader}>
                <div className={styles.resultsInfo}>
                  <span className={styles.resultsCount}>
                    {recipesCount} {formatRecipesCount(recipesCount)}
                  </span>
                  {hasFilters && (
                    <span className={styles.resultsFiltered}>
                      (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏)
                    </span>
                  )}
                </div>
              </div>

              <div className={styles.recipesGrid}>
                {recipeData.recipes.map((recipe) => (
                  <RecipeCard key={recipe.idMeal} recipe={recipe} />
                ))}
              </div>
            </>
          )}
        </section>
      </main>
    </div>
  );
}
